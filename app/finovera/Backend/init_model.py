#!/usr/bin/env python
"""
Script d'initialisation des mod√®les.
Charge les donn√©es et entra√Æne les mod√®les pour les pr√©dictions.
"""

import os
import pandas as pd
import numpy as np
import joblib
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from pathlib import Path

# Cr√©ation du dossier models s'il n'existe pas
os.makedirs("models", exist_ok=True)

# Fonction pour cr√©er des mod√®les de base
def create_fallback_models():
    print("‚ö†Ô∏è Cr√©ation de mod√®les de base...")
    
    # Random Forest
    rf = RandomForestClassifier(n_estimators=100, random_state=42)
    # XGBoost
    xgb_model = xgb.XGBClassifier(n_estimators=100, random_state=42)
    
    # Enregistrement
    joblib.dump(rf, "models/random_forest.joblib")
    joblib.dump(xgb_model, "models/xgboost.joblib")
    
    print("‚úÖ Mod√®les de base cr√©√©s")

if __name__ == "__main__":
    try:
        # Tenter de charger les donn√©es existantes
        data_path = Path("../../data/final_dataset.csv")
        if data_path.exists():
            print(f"‚úÖ Chargement des donn√©es depuis {data_path}")
            df = pd.read_csv(data_path)
            
            # Pr√©paration des features
            features = ["sentiment", "Close", "Volume"]
            target = (df["variation_pct"] > 0).astype(int)
            
            # S'assurer que les features existent
            missing_features = [f for f in features if f not in df.columns]
            if missing_features:
                print(f"‚ö†Ô∏è Features manquantes: {missing_features}")
                create_fallback_models()
            else:
                # Entra√Ænement des mod√®les
                print("üîÑ Entra√Ænement des mod√®les...")
                
                # Random Forest
                rf = RandomForestClassifier(n_estimators=100, random_state=42)
                rf.fit(df[features], target)
                
                # XGBoost
                xgb_model = xgb.XGBClassifier(n_estimators=100, random_state=42)
                xgb_model.fit(df[features], target)
                
                # Enregistrement
                joblib.dump(rf, "models/random_forest.joblib")
                joblib.dump(xgb_model, "models/xgboost.joblib")
                
                print("‚úÖ Mod√®les entra√Æn√©s et sauvegard√©s")
        else:
            print(f"‚ö†Ô∏è Fichier de donn√©es non trouv√©: {data_path}")
            create_fallback_models()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        create_fallback_models() 